{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validateUrl","useState","Math","random","toFixed","slice","id","touched","setTouched","hasRequiredError","hasInvalidError","htmlFor","type","classNames","event","newValue","target","onBlur","pattern","initialMovie","NewMovie","onAdd","count","setCount","setMovie","isImdbUrlValid","match","isImgUrlValid","isFromValid","trim","handleInputChange","key","prevInputs","onSubmit","preventDefault","currentCount","test","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c710f376.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  placeholder?: string;\n  required?: boolean;\n  onChange?: (newValue: string) => void;\n  validateUrl?: (value: string) => boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toFixed(16).slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validateUrl = () => true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n  const hasRequiredError = touched && required && !value;\n  const hasInvalidError = touched && value && !validateUrl(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasRequiredError || (touched && hasInvalidError),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={(event) => {\n            const newValue = event.target.value;\n\n            if (!touched) {\n              setTouched(true);\n            }\n\n            onChange(newValue);\n          }}\n          onBlur={() => {\n            setTouched(true);\n          }}\n        />\n      </div>\n\n      {hasRequiredError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n\n      {hasInvalidError && <p className=\"help is-danger\">Invalid URL</p>}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nconst initialMovie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [movie, setMovie] = useState(initialMovie);\n\n  const isImdbUrlValid = movie.imdbUrl.match(pattern);\n  const isImgUrlValid = movie.imgUrl.match(pattern);\n\n  const isFromValid\n    = movie.title.trim()\n    && movie.imgUrl.trim()\n    && movie.imdbUrl.trim()\n    && movie.imdbId.trim()\n    && isImdbUrlValid\n    && isImgUrlValid;\n\n  const handleInputChange = (key: string, value: string) => {\n    setMovie((prevInputs) => ({ ...prevInputs, [key]: value }));\n  };\n\n  const reset = () => {\n    setMovie(initialMovie);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd(movie);\n    setCount((currentCount) => currentCount + 1);\n    reset();\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(value) => handleInputChange('title', value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(value) => handleInputChange('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        validateUrl={(value) => pattern.test(value)}\n        onChange={(value) => handleInputChange('imgUrl', value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        validateUrl={(value) => pattern.test(value)}\n        onChange={(value) => handleInputChange('imdbUrl', value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={(value) => handleInputChange('imdbId', value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFromValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const addMovie = (newMovie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}